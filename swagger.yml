openapi: 3.0.3
info:
  title: Swagger Run Forest Run RFR - OpenAPI 3.0
  description: |-
    [github](github.com/mirustal/forest-run)
    
    [youtrack](https://yasentechonology.youtrack.cloud/agiles/147-7/current)
  version: 0.0.1


servers:
  - url: https://petstore3.swagger.io/api/v3
  
tags:
  - name: run
    description: Everything about Runs
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /run/create:
    post:
      tags:
        - run
      operationId: createRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Run'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'

  /run/get:
    get:
      tags:
        - run
      operationId: getRun
      parameters:
        - name: id
          in: query
          description: The run id for get
          required: True
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'

  /run/edit:
    post:
      tags:
        - run
      operationId: editRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Run'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
      security:
        - api_key: []

  /run/search:
    post:
      tags:
        - run
      operationId: searchRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunSearch'
      responses: 
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/RunSearch'

        

  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
          
components:
  schemas:

  
    Route:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1234
    
    Run:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1234
        name:
          type: string
          format: string
          example: "runforest2024"
        place:
          $ref: '#/components/schemas/Place'
        timeStart:
          type: integer
          format: int64
          example: 123456
        participationMode:
          type: integer
          enum:
            - open
            - invite
            - request
          format: int32
          example: 1
        route:
          $ref: '#/components/schemas/Route'
    
    Place:
      type: object
      properties:
        county:
          type: string
          format: string
          example: "russia"
        city:
          type: string
          format: string
          example: "city17"
        metro:
          type: string
          format: string
          example: "kukuevo"
        coordinates:
          type: object
          properties:
            latitude:
              type: number
              format: float
              example: 32.30642
            longitude:
              type: number
              format: float
              example: -122.61458
            
          
    RunSearch:
      type: object
      properties:
        search:
          type: string
          format: string
          example: "kukuevo"
        filter:
          $ref: '#/components/schemas/Run'
        

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userRole:
          type: integer
          description: User role organizer|viewer|runner
          format: int32
          example: 1
      xml:
        name: user
    
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
        
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header